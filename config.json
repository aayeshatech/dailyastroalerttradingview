import streamlit as st
import pandas as pd
import json
from datetime import datetime

# --- Load Config ---
with open("config.json") as f:
    config = json.load(f)

# --- Normalize names ---
def normalize_name(name):
    """Normalize nakshatra names for flexible matching."""
    return name.strip().lower().replace(" ", "")

def is_friendly(planet, nakshatra):
    nakshatra_norm = normalize_name(nakshatra)
    return any(nakshatra_norm in normalize_name(n) for n in config["friendly_nakshatras"].get(planet, []))

def is_enemy(planet, nakshatra):
    nakshatra_norm = normalize_name(nakshatra)
    return any(nakshatra_norm in normalize_name(n) for n in config["enemy_nakshatras"].get(planet, []))

# --- Title ---
st.title("ðŸ“… Astro-Trading Signals")

# --- File uploaders ---
watchlist_file = st.file_uploader("Upload Watchlist TXT", type="txt")
transit_file = st.file_uploader("Upload Planetary Transit TXT", type="txt")

if watchlist_file and transit_file:
    # Read Watchlist
    watchlist_symbols = [line.strip() for line in watchlist_file if line.strip()]
    
    # Read Transit Data
    df_transit = pd.read_csv(transit_file, sep="\t")
    df_transit.columns = [c.strip() for c in df_transit.columns]

    today_str = datetime.now().strftime("%d-%b-%Y")
    generated_time = datetime.now().strftime("%d-%b-%Y %H:%M")

    signals = []
    for _, row in df_transit.iterrows():
        planet = row["Planet"].strip()
        nakshatra = row["Nakshatra"].strip()

        if is_enemy(planet, nakshatra):
            sentiment = "Bearish"
        elif is_friendly(planet, nakshatra):
            sentiment = "Bullish"
        else:
            sentiment = None  # Neutral, skip

        if sentiment:
            # Match sectors
            for sector, planets in config["sectors"].items():
                if planet in planets:
                    # Filter symbols for sector
                    for symbol in watchlist_symbols:
                        if sector in symbol.upper():  # crude sector detection
                            signals.append((symbol, sentiment, row["Time"], row["Time"]))

    # --- Output ---
    if signals:
        st.write(f"ðŸ“… **Astro-Trading Signals â€” {today_str} (Generated {generated_time})**")
        for symbol, sentiment, entry, exit_time in signals:
            emoji = "ðŸŸ¢" if sentiment == "Bullish" else "ðŸ”´"
            st.write(f"{emoji} {symbol} â†’ {sentiment} | Entry: {entry} | Exit: {exit_time}")
    else:
        st.warning("No bullish or bearish signals detected for today.")

